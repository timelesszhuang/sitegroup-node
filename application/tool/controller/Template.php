<?php

namespace app\tool\controller;

use think\Request;


/**
 * 配置文件中的页面静态化
 * 执行首页静态化相关操作
 */
class Template extends CommonToken
{

    public $templatepath = " ";
    public $templatestaticpath = "";
    public $staticsuffix = [
        '.ico' => 'image',
        '.jpg' => 'image',
        '.jpeg' => 'image',
        '.png' => 'image',
        '.gif' => 'image',
        '.bmp' => 'image',
        '.svg' => 'image',
        '.tif' => 'image',
        '.css' => 'css',
        '.less' => 'css',
        '.saas' => 'css',
        '.js' => 'js',
        '.ttf' => 'font',
        '.eot' => 'font',
        '.otf' => 'font',
        '.woff' => 'font',
    ];
    public $htmlsuffix = [
        '.html' => 'html',
        '.htm' => 'html',
        '.phtml' => 'html',
        '.tpl' => 'html'
    ];

    /**
     *
     */
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->templatepath = ROOT_PATH . "public/template/";
        $this->templatestaticpath = ROOT_PATH . 'public/templatestatic/';
    }

    /**
     * Converts bytes into human readable file size.
     *
     * @param string $bytes
     * @return string human readable file size (2,87 Мб)
     * @author Mogilev Arseny
     */
    public function FileSizeConvert($bytes)
    {
        $bytes = floatval($bytes);
        $arBytes = array(
            0 => array(
                "UNIT" => "TB",
                "VALUE" => pow(1024, 4)
            ),
            1 => array(
                "UNIT" => "GB",
                "VALUE" => pow(1024, 3)
            ),
            2 => array(
                "UNIT" => "MB",
                "VALUE" => pow(1024, 2)
            ),
            3 => array(
                "UNIT" => "KB",
                "VALUE" => 1024
            ),
            4 => array(
                "UNIT" => "B",
                "VALUE" => 1
            ),
        );
        foreach ($arBytes as $arItem) {
            if ($bytes >= $arItem["VALUE"]) {
                $result = $bytes / $arItem["VALUE"];
                $result = strval(round($result, 2)) . " " . $arItem["UNIT"];
                break;
            }
        }
        return $result;
    }

    /**
     * 获取文件的后缀
     * @access private
     */
    private function getfilesuffix($file)
    {
        $suffix = [];
        foreach ($this->staticsuffix as $k => $v) {
            if (strpos($file, $k) !== false) {
                $suffix = ['type' => $v, 'suffix' => $k];
            }
        }
        foreach ($this->htmlsuffix as $k => $v) {
            if (strpos($file, $k) !== false) {
                $suffix = ['type' => $v, 'suffix' => $k];
            }
        }
        if (empty($suffix)) {
            //表示没有匹配到 相关list
            $filesuffix = end(explode('.', $file));
            $suffix = ['type' => 'other', 'suffix' => ".$filesuffix"];
        }
        return $suffix;
    }


    /**
     * 模板列表
     * @access public
     */
    public function templatelist()
    {
        $list = Request::instance()->get('list');
        if ($list) {
            switch ($list) {
                case 'static':
                    return $this->templatefilelist($this->templatestaticpath);
                    break;
                case 'html':
                    return $this->templatefilelist($this->templatepath);
                    break;
            }
        } else {
            //如果类型不存在的话亲你跪求模板文件
            return $this->templatefilelist($this->templatepath);
        }
    }


    /***
     * 静态文件列表相关
     * @access public
     */
    public function templatefilelist($path)
    {
        //获取文件列表
        $fileArray = [];
        if (false != ($handle = opendir($path))) {
            while (false !== ($file = readdir($handle))) {
                //去掉"“.”、“..”以及带“.xxx”后缀的文件
                if ($file != "." && $file != ".." && $file != ".env" && $file != 'README.md') {
                    $suffix = $this->getfilesuffix($file);
                    $filepath = $path . $file;
                    $filesize = filesize($filepath);
                    $formatsize = $filesize ? $this->FileSizeConvert($filesize) : '0';
                    $fileArray[] = [
                        'name' => $file,
                        //字节数
                        'size' => $formatsize,
                        //文件类型
                        'type' => $suffix['type'],
                        //后缀
                        'suffix' => $suffix['suffix'],
                        //文件的修改时间
                        'filemtime' => date('Y-m-d H:i:s', filemtime($filepath)),
                        //文件创建时间
                        'filectime' => date('Y-m-d H:i:s', filectime($filepath)),
                    ];
                }
            }
            //关闭句柄
            closedir($handle);
        }
        if ($fileArray) {
            $data = ['status' => 'success', 'msg' => '模板文件列表获取成功。', 'filelist' => $fileArray];
        } else {
            $data = ['status' => 'failed', 'msg' => '模板未传递或没有获取到模板文件。', 'filelist' => $fileArray,];
        }
        print_r($data);
        return json_encode($data);
    }


    /**
     * 获取 Oss 相关文件
     * 1、 新上传文件 添加 会传递 oss_path 跟 filename 类型 type  add
     *
     * 2、 修改文件内容的情况  传递 oss_path 跟 filename  类型 type update
     *
     * 3、 替换文件  添加 osspath 跟 file_name 类型 要替换另外一个  replace
     * @access public
     */
    public function getOssFile()
    {
        //获取 oss 相关数据
//        $ossObj = $this->ossGetObject($template->path_oss, $zipTemplateFilePath);
    }


    /**
     * 模板读操作
     * 需要传递 site_id 跟 filename 不带 .html(只需要filename)
     * @access public
     */
    public function templateread()
    {
        //模板读取
        $filename = Request::instance()->param('filename');
        $file_path = $this->templatepath . $filename . '.html';
        if (!file_exists($file_path)) {
            return json_encode(['status' => 'failed', 'msg' => '模板文件不存在。', 'filename' => $filename, 'content' => '']);
        }
        //读取文件内容
        $content = file_get_contents($file_path);
        if ($content) {
            return json_encode(['status' => 'success', 'msg' => '获取模板内容成功。', 'filename' => $filename, 'content' => $content]);
        } else {
            return json_encode(['status' => 'failed', 'msg' => '获取模板内容失败，请稍后重试。', 'filename' => $filename, 'content' => '']);
        }
    }

    /**
     * 模板更新操作
     * filename 模板名
     * content
     * @access public
     */
    public function templateupdate()
    {
        //模板写操作
        $filename = Request::instance()->param('filename');
        $content = Request::instance()->param('content');
        $file_path = $this->templatepath . $filename . '.html';
        if (!file_exists($file_path)) {
            return json_encode(['status' => 'failed', 'msg' => '模板文件不存在,请确定文件存在。']);
        }
        if ($content) {
            file_put_contents($file_path, $content);
            return json_encode(['status' => 'success', 'msg' => '修改模板内容成功。']);
        } else {
            return json_encode(['status' => 'failed', 'msg' => '修改模板内容失败，请填写模板内容。']);
        }
    }

    /**
     * 模板添加操作
     * filename 模板文件名
     * content 要填充的内容
     * @access public
     */
    public function templateadd()
    {
        //模板写操作
        $filename = Request::instance()->param('filename');
        $content = Request::instance()->param('content');
        $file_path = $this->templatepath . $filename . '.html';
        if (file_exists($file_path)) {
            return json_encode(['status' => 'failed', 'msg' => '模板文件已经存在，请更换模板名。']);
        }
        if ($content) {
            file_put_contents($file_path, $content);
            return json_encode(['status' => 'success', 'msg' => '添加模板成功。']);
        } else {
            return json_encode(['status' => 'failed', 'msg' => '添加模板失败，请填写模板内容。']);
        }
    }


}
